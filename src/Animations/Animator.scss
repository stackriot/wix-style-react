// Defaults
///////////

// Cubic Bezier
///////////////

$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);
$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);

// Duration
///////////

.timing-micro {
  transition-duration: .12s
}

;
.timing-small {
  transition-duration: .15s
}

;
.timing-medium {
  transition-duration: .2s
}

;
.timing-large {
  transition-duration: .3s
}

;
.timing-debug {
  transition-duration: 10s
}

;

// TimingFunction
/////////////////

@mixin timingFunction() {
  .timing-micro, .timing-small {
    transition-timing-function: $easeOutCubic;
  }
;
  .timing-medium, .timing-large {
    transition-timing-function: $easeOutQuint;
  }
;
}

// Sequence Delay
/////////////////

$sequence-delay-duration: .08s;
$sequence-delay-max-child: 100;

@mixin delayEnter() {
  @for $i from 1 through $sequence-delay-max-child {
    &.childSequenceDelay-#{$i} {
      $delay: $i * $sequence-delay-duration;
      transition: opacity 0s linear $delay;
      opacity: 0;

      .child {
        transition-delay: $delay;
      }

      .translate {
        transition-delay: $delay;
      }

    }

  }
}

@mixin delayEnterActive() {
  @for $i from 1 through $sequence-delay-max-child {
    &.childSequenceDelay-#{$i} {
      opacity: 1;
    }
  }
}

@mixin delayLeave() {
  @for $i from 1 through $sequence-delay-max-child {
    $delay: $i * $sequence-delay-duration;
    &.childSequenceDelay-#{$i} {

      .child {
        transition-delay: $delay;
      }

      .translate {
        transition-delay: $delay;
      }

    }

  }
}

// Opacity
//////////

@mixin opacityEnter() {
  .opacity {
    &.timing-micro {
      opacity: .9;
    }
    &.timing-small, &.timing-medium {
      opacity: .5;
    }
    &.timing-large {
      opacity: .66;
    }
    &.timing-debug {
      opacity: 0;
    }
  }
}

@mixin opacityEnterActive() {
  .opacity {
    &.timing-micro, &.timing-small, &.timing-medium, &.timing-large, &.timing-debug {
      opacity: 1;
    }
  }
}

@mixin opacityLeave() {
  .opacity {
    opacity: 1;
  }
}

@mixin opacityLeaveActive() {
  .opacity {
    opacity: 0;
  }
}

// Scale
////////

@mixin scaleMinimum() {
  .scale {
    &.timing-micro, &.timing-large {
      transform: scale(0.9);
    }
  ;
    &.timing-small, &.timing-medium {
      transform: scale(0.75);
    }
  ;
    &.timing-debug {
      transform: scale(0);
    }
  ;
  }
}

@mixin scaleMaximum() {
  .scale {
    &.timing-micro, &.timing-small, &.timing-medium, &.timing-large, &.timing-debug {
      transform: scale(1);
    }
  ;
  }
}

// Height
/////////

@mixin heightMinimum() {
  .height {
    overflow: hidden;
    max-height: 0;
  }
}

@mixin heightMaximum() {
  .height {
    overflow: hidden;
    max-height: 100%;
  }
}

// Width
/////////

@mixin widthMinimum() {
  .width {
    overflow: hidden;
    max-width: 0;
  }
}

@mixin widthMaximum() {
  .width {
    overflow: hidden;
    max-width: 100%;
  }
}

// Translate
////////////

@mixin translateShow() {
  &:not(.enter):not(.leave) {
    transform: translate(0, 0);
  }
}

@mixin translateHide() {
  @for $i from 1 through 10 {
    $size: $i * 10%;
    &.translate-#{$i * 10} {
      &.translate-top {
        transform: translate(0, $size);
      }

      &.translate-bottom {
        transform: translate(0, -$size);
      }

      &.translate-left {
        transform: translate($size, 0);
      }

      &.translate-right {
        transform: translate(-$size, 0);
      }
    }
  }
}

@mixin translateEnter() {
  .translate {
    transition-property: all;
    transition-duration: .3s;
    transition-timing-function: $easeOutCubic;
    @include translateHide();
  }

  .timing-debug .translate {
    transition-duration: 10s;
  }
}

@mixin translateEnterActive() {
  .translate {
    @include translateShow();
  }
}

@mixin translateLeave() {
  .translate {
    transition-property: all;
    transition-duration: .3s;
    transition-timing-function: $easeInOutQuint;
    @include translateShow();
  }

  .timing-debug .translate {
    transition-duration: 10s;
  }
}

@mixin translateLeaveActive() {
  .translate {
    @include translateHide();
  }
}


// Minimum Maximum Summary
//////////////////////////

@mixin minimum() {
  @include scaleMinimum();
  @include heightMinimum();
  @include widthMinimum();
}

@mixin maximum() {
  @include scaleMaximum();
  @include heightMaximum();
  @include widthMaximum();
}


// Animation classes
////////////////////

.enter {
  transition-property: all;
  @include timingFunction();
  @include opacityEnter();
  @include translateEnter();
  @include delayEnter();
  @include minimum();
}

.enter-active {
  @include opacityEnterActive();
  @include translateEnterActive();
  @include delayEnterActive();
  @include maximum();
}

.leave {
  transition-property: all;
  @include timingFunction();
  @include opacityLeave();
  @include translateLeave();
  @include delayLeave();
  @include maximum();
}

.leave-active {
  @include opacityLeaveActive();
  @include translateLeaveActive();
  @include minimum();

}