// Defaults
///////////

// Cubic Bezier
///////////////

$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);
$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);


// Duration
///////////

$timing-micro: .12s;
$timing-small: .15s;
$timing-medium: .2s;
$timing-large: .3s;
$timing-debug: 100s;
$timing-translate: $timing-large;

.timing-micro {
  transition-duration: $timing-micro
}

;
.timing-small {
  transition-duration: $timing-small
}

;
.timing-medium {
  transition-duration: $timing-medium
}

;
.timing-large {
  transition-duration: $timing-large
}

;
.timing-debug {
  transition-duration: $timing-debug
}

;

// TimingFunction
/////////////////

@mixin timingFunction() {
  .timing-micro, .timing-small {
    transition-timing-function: $easeOutCubic;
  }
;
  .timing-medium, .timing-large {
    transition-timing-function: $easeOutQuint;
  }
;
}

// Sequence Delay
/////////////////

$sequence-delay-duration: .08s;
$sequence-delay-max-child: 100;

@keyframes hide-animation-hack {
  0% { opacity: 1 }
  99% { opacity: 1 }
  100% { opacity: 0 }
}

@mixin delayEnterBuilder($prefix: '') {
  @for $i from 1 through $sequence-delay-max-child {
    &.child-sequence#{$prefix}-#{$i} {
      $delay: ($i - 1) * $sequence-delay-duration;
      transition-property: opacity;
      transition-duration: 0s;
      transition-timing-function: linear;
      transition-delay: $delay;
      opacity: 0;

      .child {
        transition-delay: $delay;
      }

      .translate {
        transition-delay: $delay;
      }

    }

  }
}

@mixin delayEnterActive() {
  @for $i from 1 through $sequence-delay-max-child {
    &.child-sequence-#{$i} {
      opacity: 1;
    }
  }
}

@mixin delayLeaveBuilder($prefix: '') {
  @for $i from 1 through $sequence-delay-max-child {
    $delay: ($i - 1) * $sequence-delay-duration;
    &.child-sequence#{$prefix}-#{$i} {

      &.translate-wrapper {
        animation: hide-animation-hack ($delay + $timing-translate) forwards;
      }

      &:not(.translate-wrapper) {
        animation: hide-animation-hack ($delay + $timing-large) forwards;

        &.timing-micro { animation-duration: $delay + $timing-micro}
        &.timing-small { animation-duration: $delay + $timing-small}
        &.timing-medium { animation-duration: $delay + $timing-medium}
      }

      .child {
        transition-delay: $delay;
      }

      .translate {
        transition-delay: $delay;
      }

    }

  }
}

@mixin delayEnter() {
  @include delayEnterBuilder();
}

@mixin delayEnterFlip() {
  @include delayEnterBuilder('-reverse');
}

@mixin delayLeave() {
  @include delayLeaveBuilder();
}

@mixin delayLeaveFlip() {
  @include delayLeaveBuilder('-reverse');
}

.sequence-default, .sequence-flip {
  .enter {
    @include delayEnter()
  }
}

.sequence-reverse, .sequence-reverse-flip {
  .enter {
    @include delayEnterFlip()
  }
}


.sequence-default, .sequence-reverse-flip  {
  .leave {
    @include delayLeave()
  }
}

.sequence-flip, .sequence-reverse {
  .leave {
    @include delayLeaveFlip()
  }
}

.sequence-default, .sequence-flip, .sequence-reverse, .sequence-reverse-flip {
  .enter-active {
    @include delayEnterActive();
  }
}

// Opacity
//////////

@mixin opacityEnter() {
  .opacity {
    &.timing-micro {
      opacity: .9;
    }
    &.timing-small, &.timing-medium {
      opacity: .5;
    }
    &.timing-large {
      opacity: .66;
    }
    &.timing-debug {
      opacity: 0;
    }
  }
}

@mixin opacityEnterActive() {
  .opacity {
    &.timing-micro, &.timing-small, &.timing-medium, &.timing-large, &.timing-debug {
      opacity: 1;
    }
  }
}

@mixin opacityLeave() {
  .opacity {
    opacity: 1;
  }
}

@mixin opacityLeaveActive() {
  .opacity {
    opacity: 0;
  }
}

// Scale
////////

@mixin scaleMinimum() {
  .scale {
    &.timing-micro, &.timing-large {
      transform: scale(0.9);
    }
  ;
    &.timing-small, &.timing-medium {
      transform: scale(0.75);
    }
  ;
    &.timing-debug {
      transform: scale(0);
    }
  ;
  }
}

@mixin scaleMaximum() {
  .scale {
    &.timing-micro, &.timing-small, &.timing-medium, &.timing-large, &.timing-debug {
      transform: scale(1);
    }
  ;
  }
}

// Height
/////////

@mixin heightMinimum() {
  .height {
    overflow: hidden;
    max-height: 0;
  }
}

@mixin heightMaximum() {
  .height {
    overflow: hidden;
    max-height: 100%;
  }
}

// Width
/////////

@mixin widthMinimum() {
  .width {
    overflow: hidden;
    max-width: 0;
  }
}

@mixin widthMaximum() {
  .width {
    overflow: hidden;
    max-width: 100%;
  }
}

// Translate
////////////

@mixin createTranslateAnimations($prefix: '') {
  @for $i from 1 through 10 {
    $size: $i * 10%;
    &.translate#{$prefix}-#{$i * 10} {
      &.translate-top {
        transform: translate(0, $size);
      }

      &.translate-bottom {
        transform: translate(0, -$size);
      }

      &.translate-left {
        transform: translate($size, 0);
      }

      &.translate-right {
        transform: translate(-$size, 0);
      }
    }
  }
}

@mixin translateShow() {
  &:not(.enter):not(.leave) {
    transform: translate(0, 0);
  }
}

@mixin translateHide() {
  @include createTranslateAnimations();
}

@mixin translateHideOut() {
  @include createTranslateAnimations('-out');
}

@mixin translateEnter() {
  .translate {
    transition-property: all;
    transition-duration: .3s;
    transition-timing-function: $easeOutCubic;
    @include translateHide();
  }

  .timing-debug .translate {
    transition-duration: 10s;
  }
}

@mixin translateEnterActive() {
  .translate {
    @include translateShow();
  }
}

@mixin translateLeave() {
  .translate {
    transition-property: all;
    transition-duration: .3s;
    transition-timing-function: $easeInOutQuint;
    @include translateShow();
  }

  .timing-debug .translate {
    transition-duration: 10s;
  }
}

@mixin translateLeaveActive() {
  .translate {
    @include translateHide();
  }
}

@mixin translateOutEnter() {
  .translate {
    @include translateHideOut();
  }
};

@mixin translateOutLeaveActive() {
  .translate {
    @include translateHideOut();
  }
};


// Minimum Maximum Summary
//////////////////////////

@mixin minimum() {
  @include scaleMinimum();
  @include heightMinimum();
  @include widthMinimum();
}

@mixin maximum() {
  @include scaleMaximum();
  @include heightMaximum();
  @include widthMaximum();
}


// Animation classes
////////////////////

.enter {
  transition-property: all;
  @include timingFunction();
  @include opacityEnter();
  @include translateEnter();
  @include minimum();
}

.enter-active {
  @include opacityEnterActive();
  @include translateEnterActive();
  @include maximum();
}

.leave {
  transition-property: all;
  @include timingFunction();
  @include opacityLeave();
  @include translateLeave();
  @include maximum();
}

.leave-active {
  @include opacityLeaveActive();
  @include translateLeaveActive();
  @include minimum();
}

.animate-out .enter {
  @include translateOutEnter();
}

.animate-out .enter-active {

}

.animate-out .leave {

}

.animate-out .leave-active {
  @include translateOutLeaveActive();
}
